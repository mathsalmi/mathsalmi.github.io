{"version":3,"sources":["ChartItem.tsx","App.tsx","serviceWorker.ts","icons.tsx","index.tsx"],"names":["memo","props","symbol","theme","Themes","DARK","locale","autosize","interval","timezone","style","BarStyles","CANDLES","toolbar_bg","enable_publishing","withdateranges","hide_side_toolbar","allow_symbol_change","App","useState","isDragging","setIsDragging","currentLayout","index","i","x","gridWidth","y","Math","floor","w","h","cols","rowHeight","width","draggableHandle","className","onDragStart","onDragStop","onResizeStart","onResizeStop","margin","containerPadding","map","chart","key","data-grid","icon","Boolean","window","location","hostname","match","library","add","faGripVertical","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQA0BeA,kBAnBG,SAACC,GACjB,OACE,kBAAC,IAAD,CACEC,OAAQD,EAAMC,OACdC,MAAOC,SAAOC,KACdC,OAAO,KACPC,UAAQ,EACRC,SAAS,KACTC,SAAS,oBACTC,MAAOC,YAAUC,QACjBC,WAAW,UACXC,mBAAmB,EACnBC,gBAAgB,EAChBC,mBAAmB,EACnBC,qBAAqB,O,QC8CZC,G,MA7DO,WAAO,IAAD,EACUC,oBAAS,GADnB,mBACnBC,EADmB,KACPC,EADO,KAgBpBC,EAAgB,SAACC,GAUrB,MAAO,CACLC,EAAG,GAAKD,EACRE,EALgBF,EALQ,EAEZG,EASZC,EARa,EAGEC,KAAKC,MAJRH,EAIeH,EANH,GAYxBO,EAVYJ,EAWZK,EAVa,IAcjB,OACE,kBAAC,IAAD,CACEC,KAAM,GACNC,UAAW,GACXC,MAAO,KACPC,gBAAgB,iBAChBC,UArCKhB,EAAa,cAAgB,GAsClCiB,YAAa,kBAAMhB,GAAc,IACjCiB,WAAY,kBAAMjB,GAAc,IAChCkB,cAAe,kBAAMlB,GAAc,IACnCmB,aAAc,kBAAMnB,GAAc,IAClCoB,OAAQ,CAAC,EAAG,IACZC,iBAAkB,CAAC,EAAG,IAxCX,CACb,CAAExC,OAAQ,kBACV,CAAEA,OAAQ,mBACV,CAAEA,OAAQ,kBACV,CAAEA,OAAQ,kBACV,CAAEA,OAAQ,kBACV,CAAEA,OAAQ,mBAoCAyC,KAAI,SAACC,EAAOrB,GAAR,OACV,yBAAKsB,IAAKtB,EAAOuB,YAAWxB,EAAcC,IACxC,kBAAC,EAAD,CAAWrB,OAAQ0C,EAAM1C,SACzB,yBAAKkC,UAAU,iBACb,kBAAC,IAAD,CAAiBW,KAAK,0BC/CdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBCZNC,IAAQC,IAAIC,KCCZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SFkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b8c030de.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport TradingViewWidget, { Themes, BarStyles } from \"react-tradingview-widget\";\n\ntype Props = {\n  symbol: string;\n};\n\nconst ChartItem = (props: Props) => {\n  return (\n    <TradingViewWidget\n      symbol={props.symbol}\n      theme={Themes.DARK}\n      locale=\"en\"\n      autosize\n      interval=\"30\"\n      timezone=\"America/Sao_Paulo\"\n      style={BarStyles.CANDLES}\n      toolbar_bg=\"#f1f3f6\"\n      enable_publishing={false}\n      withdateranges={true}\n      hide_side_toolbar={false}\n      allow_symbol_change={true}\n    />\n  );\n};\n\nexport default memo(ChartItem);\n","import React, { useState } from \"react\";\nimport GridLayout from \"react-grid-layout\";\nimport ChartItem from \"./ChartItem\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./ChartItem.css\";\n\nconst App: React.FC = () => {\n  const [isDragging, setIsDragging] = useState(false);\n\n  const getWrapperClass = () => {\n    return isDragging ? \"is_dragging\" : \"\";\n  };\n\n  const charts = [\n    { symbol: \"MERCADO:BTCBRL\" },\n    { symbol: \"BITSTAMP:BTCUSD\" },\n    { symbol: \"MERCADO:XRPBRL\" },\n    { symbol: \"MERCADO:ETHBRL\" },\n    { symbol: \"MERCADO:BCHBRL\" },\n    { symbol: \"MERCADO:LTCBRL\" }\n  ];\n\n  const currentLayout = (index: number) => {\n    const gridWidth = 12;\n    const maxElementsPerRow = 2;\n\n    const width = gridWidth / maxElementsPerRow;\n    const height = 4;\n\n    const currentX = (index % maxElementsPerRow) * width;\n    const currentY = Math.floor((index * width) / maxElementsPerRow) * height;\n\n    return {\n      i: \"\" + index,\n      x: currentX,\n      y: currentY,\n      w: width,\n      h: height\n    };\n  };\n\n  return (\n    <GridLayout\n      cols={12}\n      rowHeight={80}\n      width={1200}\n      draggableHandle=\".custom_handle\"\n      className={getWrapperClass()}\n      onDragStart={() => setIsDragging(true)}\n      onDragStop={() => setIsDragging(false)}\n      onResizeStart={() => setIsDragging(true)}\n      onResizeStop={() => setIsDragging(false)}\n      margin={[0, 30]}\n      containerPadding={[0, 0]}\n    >\n      {charts.map((chart, index) => (\n        <div key={index} data-grid={currentLayout(index)}>\n          <ChartItem symbol={chart.symbol} />\n          <div className=\"custom_handle\">\n            <FontAwesomeIcon icon=\"grip-vertical\" />\n          </div>\n        </div>\n      ))}\n    </GridLayout>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*\n * Add Font Awesome icons to the project\n */\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faGripVertical } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faGripVertical);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport \"./icons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}