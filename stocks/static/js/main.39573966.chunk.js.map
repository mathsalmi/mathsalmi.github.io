{"version":3,"sources":["ChartItem.tsx","App.tsx","serviceWorker.ts","icons.tsx","index.tsx"],"names":["memo","props","symbol","theme","Themes","DARK","locale","autosize","interval","timezone","style","BarStyles","CANDLES","toolbar_bg","enable_publishing","withdateranges","hide_side_toolbar","allow_symbol_change","ResponsiveGridLayout","WidthProvider","Responsive","Charts","Sizes","ItemsConfig","lg","itemsPerRow","cols","breakpoint","height","md","sm","xs","xxs","makeCompleteLayoutPerSize","size","map","_","index","width","i","x","y","Math","floor","w","h","makeRowLayout","App","useState","isDragging","setIsDragging","sizeMap","callback","reduce","prev","curr","layouts","breakpoints","rowHeight","draggableHandle","className","onDragStart","onDragStop","onResizeStart","onResizeStop","margin","containerPadding","chart","key","icon","Boolean","window","location","hostname","match","library","add","faGripVertical","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QA0BeA,kBAnBG,SAACC,GACjB,OACE,kBAAC,IAAD,CACEC,OAAQD,EAAMC,OACdC,MAAOC,SAAOC,KACdC,OAAO,KACPC,UAAQ,EACRC,SAAS,KACTC,SAAS,oBACTC,MAAOC,YAAUC,QACjBC,WAAW,UACXC,mBAAmB,EACnBC,gBAAgB,EAChBC,mBAAmB,EACnBC,qBAAqB,O,oOCf3B,IAAMC,EAAuBC,wBAAcC,cAErCC,EAAS,CACb,CAAEnB,OAAQ,kBACV,CAAEA,OAAQ,mBACV,CAAEA,OAAQ,kBACV,CAAEA,OAAQ,kBACV,CAAEA,OAAQ,kBACV,CAAEA,OAAQ,mBAGNoB,EAAQ,CAAC,KAAM,KAAM,KAAM,KAAM,OAWjCC,EAA6C,CACjDC,GAAI,CACFC,YAAa,EACbC,KAAM,GACNC,WAAY,KACZC,OAAQ,GAEVC,GAAI,CACFJ,YAAa,EACbC,KAAM,GACNC,WAAY,IACZC,OAAQ,GAEVE,GAAI,CACFL,YAAa,EACbC,KAAM,GACNC,WAAY,IACZC,OAAQ,GAEVG,GAAI,CACFN,YAAa,EACbC,KAAM,GACNC,WAAY,IACZC,OAAQ,GAEVI,IAAK,CACHP,YAAa,EACbC,KAAM,GACNC,WAAY,EACZC,OAAQ,IAqBNK,EAA4B,SAACC,GACjC,OAAOb,EAAOc,KAAI,SAACC,EAAGC,GAAJ,OAlBE,SAACA,EAAeH,GAAgB,IAAD,EACbX,EAAYW,GAA1CR,EAD2C,EAC3CA,KAAME,EADqC,EACrCA,OAAQH,EAD6B,EAC7BA,YAEhBa,EAAQZ,EAAOD,EAKrB,MAAO,CACLc,EAAG,GAAKF,EACRG,EALgBH,EAAQZ,EAAea,EAMvCG,EALeC,KAAKC,MAAON,EAAQC,EAASb,GAAeG,EAM3DgB,EAAGN,EACHO,EAAGjB,GAK2BkB,CAAcT,EAAOH,OA4CxCa,EAzCO,WAAO,IAAD,EACUC,oBAAS,GADnB,mBACnBC,EADmB,KACPC,EADO,KAOpBC,EAAU,SAACC,GACf,OAAO9B,EAAM+B,QACX,SAACC,EAAMC,GAAP,O,yVAAA,IAAsBD,EAAtB,eAA6BC,EAAOH,EAASG,OAC7C,KAIJ,OACE,kBAACrC,EAAD,CACEsC,QAASL,GAAQ,SAAAjB,GAAI,OAAID,EAA0BC,MACnDuB,YAAaN,GAAQ,SAAAjB,GAAI,OAAIX,EAAYW,GAAMP,cAC/CD,KAAMyB,GAAQ,SAAAjB,GAAI,OAAIX,EAAYW,GAAMR,QACxCgC,UAAW,GACXC,gBAAgB,iBAChBC,UAjBKX,EAAa,cAAgB,GAkBlCY,YAAa,kBAAMX,GAAc,IACjCY,WAAY,kBAAMZ,GAAc,IAChCa,cAAe,kBAAMb,GAAc,IACnCc,aAAc,kBAAMd,GAAc,IAClCe,OAAQ,CAAC,EAAG,IACZC,iBAAkB,CAAC,EAAG,IAErB7C,EAAOc,KAAI,SAACgC,EAAO9B,GAAR,OACV,yBAAK+B,IAAK/B,GACR,kBAAC,EAAD,CAAWnC,OAAQiE,EAAMjE,SACzB,yBAAK0D,UAAU,iBACb,kBAAC,IAAD,CAAiBS,KAAK,yBCvGdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBCZNC,IAAQC,IAAIC,KCCZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SFkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.39573966.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport TradingViewWidget, { Themes, BarStyles } from \"react-tradingview-widget\";\n\ntype Props = {\n  symbol: string;\n};\n\nconst ChartItem = (props: Props) => {\n  return (\n    <TradingViewWidget\n      symbol={props.symbol}\n      theme={Themes.DARK}\n      locale=\"en\"\n      autosize\n      interval=\"30\"\n      timezone=\"America/Sao_Paulo\"\n      style={BarStyles.CANDLES}\n      toolbar_bg=\"#f1f3f6\"\n      enable_publishing={false}\n      withdateranges={true}\n      hide_side_toolbar={false}\n      allow_symbol_change={true}\n    />\n  );\n};\n\nexport default memo(ChartItem);\n","import React, { useState } from \"react\";\nimport { Responsive, WidthProvider } from \"react-grid-layout\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ChartItem from \"./ChartItem\";\nimport \"./ChartItem.css\";\n\nconst ResponsiveGridLayout = WidthProvider(Responsive);\n\nconst Charts = [\n  { symbol: \"MERCADO:BTCBRL\" },\n  { symbol: \"BITSTAMP:BTCUSD\" },\n  { symbol: \"MERCADO:XRPBRL\" },\n  { symbol: \"MERCADO:ETHBRL\" },\n  { symbol: \"MERCADO:BCHBRL\" },\n  { symbol: \"MERCADO:LTCBRL\" }\n];\n\nconst Sizes = [\"lg\", \"md\", \"sm\", \"xs\", \"xxs\"] as const;\n\ntype Size = typeof Sizes[number];\n\ntype ConfigItem = {\n  itemsPerRow: number;\n  cols: number;\n  breakpoint: number;\n  height: number;\n};\n\nconst ItemsConfig: { [key in Size]: ConfigItem } = {\n  lg: {\n    itemsPerRow: 3,\n    cols: 12,\n    breakpoint: 1200,\n    height: 4\n  },\n  md: {\n    itemsPerRow: 2,\n    cols: 12,\n    breakpoint: 996,\n    height: 4\n  },\n  sm: {\n    itemsPerRow: 2,\n    cols: 12,\n    breakpoint: 768,\n    height: 4\n  },\n  xs: {\n    itemsPerRow: 1,\n    cols: 12,\n    breakpoint: 480,\n    height: 4\n  },\n  xxs: {\n    itemsPerRow: 1,\n    cols: 12,\n    breakpoint: 0,\n    height: 4\n  }\n};\n\nconst makeRowLayout = (index: number, size: Size) => {\n  const { cols, height, itemsPerRow } = ItemsConfig[size];\n\n  const width = cols / itemsPerRow;\n\n  const currentX = (index % itemsPerRow) * width;\n  const currentY = Math.floor((index * width) / itemsPerRow) * height;\n\n  return {\n    i: \"\" + index,\n    x: currentX,\n    y: currentY,\n    w: width,\n    h: height\n  };\n};\n\nconst makeCompleteLayoutPerSize = (size: Size) => {\n  return Charts.map((_, index) => makeRowLayout(index, size));\n};\n\nconst App: React.FC = () => {\n  const [isDragging, setIsDragging] = useState(false);\n\n  const getWrapperClass = () => {\n    return isDragging ? \"is_dragging\" : \"\";\n  };\n\n  const sizeMap = (callback: (size: Size) => any) => {\n    return Sizes.reduce(\n      (prev, curr) => ({ ...prev, [curr]: callback(curr) }),\n      {}\n    );\n  };\n\n  return (\n    <ResponsiveGridLayout\n      layouts={sizeMap(size => makeCompleteLayoutPerSize(size))}\n      breakpoints={sizeMap(size => ItemsConfig[size].breakpoint)}\n      cols={sizeMap(size => ItemsConfig[size].cols)}\n      rowHeight={80}\n      draggableHandle=\".custom_handle\"\n      className={getWrapperClass()}\n      onDragStart={() => setIsDragging(true)}\n      onDragStop={() => setIsDragging(false)}\n      onResizeStart={() => setIsDragging(true)}\n      onResizeStop={() => setIsDragging(false)}\n      margin={[0, 30]}\n      containerPadding={[0, 0]}\n    >\n      {Charts.map((chart, index) => (\n        <div key={index}>\n          <ChartItem symbol={chart.symbol} />\n          <div className=\"custom_handle\">\n            <FontAwesomeIcon icon=\"grip-vertical\" />\n          </div>\n        </div>\n      ))}\n    </ResponsiveGridLayout>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*\n * Add Font Awesome icons to the project\n */\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faGripVertical } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faGripVertical);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport \"./icons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}